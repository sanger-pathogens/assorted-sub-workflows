// Config inheritance options
params {
    generic_config_base = "https://raw.githubusercontent.com/sanger-pathogens/nextflow-commons/"
    generic_config_version = "master"
    generic_config_url = ""
}

manifest {
    name            = 'Nanopore Basecalling'
    author          = 'PAM Informatics'
    homePage        = 'https://gitlab.internal.sanger.ac.uk/sanger-pathogens/pipelines/assorted-sub-workflows'
    description     = 'Subworkflow for basecalling from Nanopore reads'
    mainScript      = 'basecalling.nf'
    nextflowVersion = '>=21.04.0'
    version         = 'v0.0.1'
}

params {
    // Basecalling
    basecall = "true"
    basecall_model = "dna_r10.4.1_e8.2_400bps_hac@v4.3.0"
    basecall_model_path = ""
    //this is default anyways but allows for changing
    trim_adapters = "all"
    barcode_kit_name = "" // pick within those listed in https://github.com/nanoporetech/dorado?tab=readme-ov-file#barcode-classification    
    read_format = "fastq"
    dorado_local_path = ""
    min_qscore = 9

    // Save output files
    // TODO Make all the file retaining names consistent! 
    save_fastqs = true

    reference = ""
    raw_read_dir = ""
    additional_metadata = ""

    // LSF options
    queue_size = 50
    submit_rate_limit = '50/2min'
    monochrome_logs = false

}

// to add to nextflow.commons

process {
    withLabel:gpu {

        //forms the resource from other labels
        clusterOptions = { "-M " + task.memory.toMega() + " -R 'select[ngpus>0] span[ptile=1]' -gpu 'num=1:mode=shared:gmem=" + task.memory.toMega() * 2 + "'" }
        
        queue = { task.time > 48.h ? 'gpu-basement' : task.time > 12.h ? 'gpu-huge' : 'gpu-normal' }
        
        // need to set --nv to enable GPU's to be used
        containerOptions = {
            workflow.containerEngine == "singularity" ? '--containall --cleanenv --nv':
            ( workflow.containerEngine == "docker" ? '--gpus all': null )
        }
    }
}

profiles {
    standard {
        inherit_generic_config()
    }
    docker {
        inherit_generic_config()
    }
    singularity {
        inherit_generic_config()
    }
    conda {
        inherit_generic_config()
    }
    laptop {
        includeConfig "./config/nextflow-commons/common.config"

        docker.enabled = true
        params.dorado_local_path = ""
        params.basecall_model_path = ""
    }
}

// Helper functions
def inherit_generic_config() {
    config_url = params.generic_config_url ? params.generic_config_url : "${params.generic_config_base}/${params.generic_config_version}/configs/nextflow.config"
    try {
        includeConfig "${config_url}"
    } catch (Exception e) {
        System.err.println("ERROR: Could not load generic config: ${config_url}")
        System.err.println("Encountered the following exception:")
        throw e
    }
}
